directive @userAuth(token: String) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION


type Query{
    login(username: String!, password: String!): LoginData!
    links(token:String!): [Link] @userAuth
    user(token:String!): User @userAuth
    customers(token:String!): [Customer] @userAuth
    customer(id:ID! token:String! ): Customer @userAuth
}


type Mutation{
    testResult(
        code:String!
        name:String!
        phone: String! @rules(apply: ["size:11"])
        gender: String!
        testResult:String!
        age:Int
        addressText: String
        addressCoordinates: String
        maritalStatus: String
    ):String!
    createUser(
        introducerId:String!
        uid:String! @rules(apply: ["size:10"])
        name:String!
        phone:String! @rules(apply: ["size:11"])
        email:String
        username:String
        password:String! @rules(apply: ["min:8"])
    ):User
    createCustomerOrder(
        token:String!
        customerId:String!
        items:String!
    ):Order @userAuth
    createCustomer(
        token:String!
        name: String!
        age:Int
        addressText:String
        addressCoordinates:String
        phone:String
        gender:String
        maritalStatus:String
    ): Customer! @userAuth
    createLink(
        token:String!
        name:String
        age: Int
        addressText: String
        addressCoordinates: String
        phone: String
        gender: String
        maritalStatus: String
        isEditable: Boolean
        lastEditAt: Int
        from: Int
        to: Int
    ): Link! @userAuth
    changeUser(
        token:String!
        avatar:String
        name:String
        phone:String
        email:String
        password:String
        oldPassword:String
    ):User @userAuth
    changeLink(
        token: String!
        id: String!
        isChecked: Boolean
        delete: Boolean
    ): Link @userAuth
}

# --------------------- types -------------------------

type Subset {
    id:ID
    uid:Int
    avatar:String
    name:String
    phone:String
    gender:String
    rank:String
    upLine:String
    upLineId:String
    linksId:String
    subsetsId:String
    subsets:[Subset]
    username:String
    updated_at:String
    created_at:String
    deleted_at:String
}




type TestResult{
    faceAndNeckSkin:String!
    hairAndHeadSkin:String!
    bodySkin:String!
    faceAndNeckSkinType:String!
    hairAndHeadSkinType:String!
    bodySkinType:String!
    activityTime:String!
    useSupplementsInWeek:String!
    other:String
}



type OrderItem{
    id:ID
    name:String
    price:String
    remindAt:Int
    details:String
    note:String
    created_at:String
}


type Order{
    id:ID
    customerId:ID
    customerName:String
    items:[OrderItem]
    updated_at:String
    created_at:String
    deleted_at:String
}

type Customer{
    id:ID
    marketerId: ID,
    marketerName: String
    name: String
    age:Int
    birth:Int
    addressText:String
    addressCoordinates:String
    phone:String
    gender:String
    maritalStatus:String
    orders:[Order]
    ordersId:String
    updated_at:String
    created_at:String
    deleted_at:String
}


type User{
    id:ID
    uid:Int
    avatar:String
    name:String
    phone:String
    email:String
    birth:Int
    gender:String
    address:String
    rank:String
    upLine:String
    upLineId:String
    introducerId:String
    linksId:String
    subsetsId:String
    subsets:[Subset]
    username:String
    updated_at:String
    created_at:String
    deleted_at:String
}

type Link{
    id:ID
    code:String
    creatorId:String
    creatorName:String
    testResult:TestResult
    name:String
    age: Int
    addressText: String
    addressCoordinates: String
    phone: String
    gender: String
    maritalStatus: String
    isEditable: Boolean
    isChecked:Boolean
    lastEditAt: Int
    from: Int
    to: Int
    created_at: String
    updated_at:String
}

type LoginData{
    token: String!
    name: String
}
